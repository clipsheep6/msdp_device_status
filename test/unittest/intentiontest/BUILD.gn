# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../device_status.gni")

module_output_path = "${device_status_part_name}/devicestatussrv"

ohos_unittest("DragManagerTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [ "include" ]

  defines = []

  sources = [ "src/drag_manager_test.cpp" ]

  configs = []

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/cooperate/client:intention_cooperate_client",
    "${device_status_root_path}/intention/data:intention_data",
    "${device_status_root_path}/intention/drag/client:intention_drag_client",
    "${device_status_root_path}/intention/drag/data:intention_drag_data",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_connection",
    "${device_status_root_path}/intention/ipc/tunnel:intention_tunnel_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_utils_path}:devicestatus_util",
  ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "window_manager:libdm",
  ]
}

ohos_unittest("SocketSessionTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [ "include" ]

  defines = []

  sources = [ "src/socket_session_test.cpp" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/cooperate/client:intention_cooperate_client",
    "${device_status_root_path}/intention/drag/client:intention_drag_client",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_connection",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_session_manager",
    "${device_status_root_path}/intention/ipc/tunnel:intention_tunnel_client",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]
  external_deps = [
    "ability_runtime:app_manager",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]
}

ohos_unittest("DragServerTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = true
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]

  defines = []

  sources = [ "src/drag_server_test.cpp" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/data:intention_data",
    "${device_status_root_path}/intention/drag/client:intention_drag_client",
    "${device_status_root_path}/intention/drag/data:intention_drag_data",
    "${device_status_root_path}/intention/drag/server:intention_drag_server",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_connection",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "input:libmmi-client",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
}

ohos_unittest("CooperatePluginTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]

  defines = []

  sources = [ "src/cooperate_plugin_test.cpp" ]

  deps = [
    "${device_status_intention_path}/adapters/ddp_adapter:intention_ddp_adapter",
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/adapters/ddm_adapter:intention_ddm_adapter",
    "${device_status_root_path}/intention/adapters/dsoftbus_adapter:intention_dsoftbus_adapter",
    "${device_status_root_path}/intention/adapters/input_adapter:intention_input_adapter",
    "${device_status_root_path}/intention/common/channel:intention_channel",
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/common:devicestatus_util",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
  ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "input:libmmi-client",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
}

ohos_unittest("CooperateTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [
    "include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]

  defines = []

  sources = [ "src/cooperate_test.cpp" ]

  deps = [
    "${device_status_intention_path}/adapters/ddp_adapter:intention_ddp_adapter",
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/adapters/ddm_adapter:intention_ddm_adapter",
    "${device_status_root_path}/intention/adapters/dsoftbus_adapter:intention_dsoftbus_adapter",
    "${device_status_root_path}/intention/adapters/input_adapter:intention_input_adapter",
    "${device_status_root_path}/intention/common/channel:intention_channel",
    "${device_status_root_path}/intention/cooperate/data:intention_cooperate_data",
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/intention/scheduler/plugin_manager:intention_plugin_manager",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/common:devicestatus_util",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
  ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "input:libmmi-client",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
}

ohos_unittest("InputEventSerializationTest") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"
  module_out_path = module_output_path
  include_dirs = [ "${device_status_root_path}/intention/cooperate/plugin/include/input_event_transmission" ]

  defines = []

  sources = [ "src/input_event_serialization_test.cpp" ]
  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/adapters/ddm_adapter:intention_ddm_adapter",
    "${device_status_root_path}/intention/adapters/ddp_adapter:intention_ddp_adapter",
    "${device_status_root_path}/intention/common/channel:intention_channel",
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/utils/common:devicestatus_util",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
  ]
  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwmutil_base",
  ]
}

ohos_unittest("InputEventBuilderTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path
  include_dirs = [
    "${device_status_root_path}/intention/cooperate/plugin/include/input_event_transmission",
    "${device_status_root_path}/intention/cooperate/plugin/include",
    "${device_status_root_path}/intention/adapters/ddm_adapter/include",
    "${device_status_root_path}/intention/common/channel/include",
    "${device_status_root_path}/test/unittest/intentiontest/include",
    "${device_status_service_path}/delegate_task/include",
    "${device_status_intention_path}/services/device_manager/include",
    "${device_status_utils_path}/include",
    "${device_status_service_path}/communication/service/include",
    "${device_status_service_path}/interaction/drag/include",
    "${device_status_root_path}/intention/common/epoll/include",
    "${device_status_root_path}/libs/interface",
  ]
  sources = [ "src/input_event_builder_test.cpp" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/adapters/dsoftbus_adapter:intention_dsoftbus_adapter",
    "${device_status_root_path}/intention/adapters/input_adapter:intention_input_adapter",
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_connection",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_session_manager",
    "${device_status_root_path}/intention/ipc/tunnel:intention_tunnel_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/intention/scheduler/timer_manager:intention_timer_manager",
    "${device_status_root_path}/intention/services/device_manager:intention_device_manager",
    "${device_status_root_path}/intention/services/intention_service:intention_service",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/services/interaction/drag:interaction_drag",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "device_info_manager:distributed_device_profile_client",
    "device_manager:devicemanagersdk",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "window_manager:libdm",
    "window_manager:libwmutil_base",
  ]
}

ohos_unittest("InputEventInterceptorTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path
  include_dirs = [
    "${device_status_root_path}/intention/cooperate/plugin/include/input_event_transmission",
    "${device_status_root_path}/intention/cooperate/plugin/include",
    "${device_status_root_path}/intention/adapters/ddm_adapter/include",
    "${device_status_root_path}/intention/common/channel/include",
    "${device_status_root_path}/test/unittest/intentiontest/include",
    "${device_status_service_path}/delegate_task/include",
    "${device_status_intention_path}/services/device_manager/include",
    "${device_status_utils_path}/include",
    "${device_status_service_path}/communication/service/include",
    "${device_status_service_path}/interaction/drag/include",
    "${device_status_root_path}/intention/common/epoll/include",
    "${device_status_root_path}/libs/interface",
  ]
  sources = [ "src/input_event_interceptor_test.cpp" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/adapters/dsoftbus_adapter:intention_dsoftbus_adapter",
    "${device_status_root_path}/intention/adapters/input_adapter:intention_input_adapter",
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_connection",
    "${device_status_root_path}/intention/ipc/socket:intention_socket_session_manager",
    "${device_status_root_path}/intention/ipc/tunnel:intention_tunnel_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/intention/scheduler/timer_manager:intention_timer_manager",
    "${device_status_root_path}/intention/services/device_manager:intention_device_manager",
    "${device_status_root_path}/intention/services/intention_service:intention_service",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/services/interaction/drag:interaction_drag",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "device_info_manager:distributed_device_profile_client",
    "device_manager:devicemanagersdk",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "input:libmmi-client",
    "window_manager:libdm",
    "window_manager:libwmutil_base",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":CooperatePluginTest",
    ":CooperateTest",
    ":DragManagerTest",
    ":InputEventBuilderTest",
    ":InputEventInterceptorTest",
    ":InputEventSerializationTest",
    ":SocketSessionTest",
  ]
}
