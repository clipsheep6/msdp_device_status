# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../device_status.gni")

config("drag_private_config") {
  include_dirs = [ "include" ]
}

module_output_path = "${device_status_part_name}/unit_out"

ohos_shared_library("interaction_drag") {
  include_dirs = [
    "${device_status_interfaces_path}/innerkits/interaction/include",
    "${device_status_utils_path}/include",
    "${device_status_service_path}/context/include",
    "${device_status_service_path}/native/include",
    "${device_status_service_path}/interaction/across/include",
  ]

  sources = [
    "src/drag_data_adapter.cpp",
    "src/drag_drawing.cpp",
    "src/drag_manager.cpp",
    "src/state_change_notify.cpp",
  ]

  configs = [ ":drag_private_config" ]

  defines = device_status_default_defines

  deps = [
    "${device_status_root_path}/etc/drag_icon:device_status_drag_icon",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
    "//third_party/libxml2:xml2",
  ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_standard:libcomposer",
    "graphic_standard:window_animation",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "input:libmmi-client",
    "ipc:ipc_single",
    "multimedia_image_framework:image_native",
    "window_manager:libdm",
    "window_manager:libwm",
  ]

  #if (fusion_interaction_coordination) {
  #  external_deps += [ "udmf:udmf_client" ]
  #}

  subsystem_name = "${device_status_subsystem_name}"
  part_name = "${device_status_part_name}"
}

ohos_unittest("test_across_by_ut") {
  module_out_path = module_output_path
  include_dirs = [
    "${device_status_utils_path}/include",
    "//foundation/ability/dmsfwk/services/dtbschedmgr/include",
  ]

  defines = []

  sources = [  
    "src/across_ability_adapter.cpp",
    "src/test_across_by_ut.cpp", 
  ]

  configs = [ ":drag_private_config" ]

  deps = [ "${device_status_utils_path}:devicestatus_util" ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "dmsfwk:common_sdk",
    "dmsfwk:continuation_manager",
    "c_utils:utils",
    "ipc:ipc_single",
    "ipc:ipc_core",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "samgr:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = []
  deps += [ ":test_across_by_ut" ]
}
