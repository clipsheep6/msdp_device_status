/*
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 1.0{
    global:
        extern "C++" {
            "OHOS::Msdp::DeviceStatus::GetThisThreadId()";
            "OHOS::Msdp::DeviceStatus::GetPid()";
            "OHOS::Msdp::DeviceStatus::GetProgramName()";
            "OHOS::Msdp::DeviceStatus::ChangeNumber(int)";
            "OHOS::Msdp::DeviceStatus::IsValidSvgFile(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
            "OHOS::Msdp::DeviceStatus::IsNum(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
            "OHOS::Msdp::DeviceStatus::SetThreadName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
            "OHOS::Msdp::DeviceStatus::GetMillisTime()";
            "OHOS::Msdp::UtilNapi::TypeOf(napi_env__*, napi_value__*, napi_valuetype)";
            "OHOS::Msdp::UtilNapiError::GetApiError(int, OHOS::Msdp::NapiError&)";
            "OHOS::Msdp::DeviceStatus::Utility::ShowUserAndGroup()";
            "OHOS::Msdp::DeviceStatus::Utility::ShowFileAttributes(char const*)";
            "OHOS::Msdp::DeviceStatus::Utility::IsInteger(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
            "OHOS::Msdp::DeviceStatus::Utility::DoesFileExist(char const*)";
            "OHOS::Msdp::DeviceStatus::Utility::GetFileSize(char const*)";
            "OHOS::Msdp::DeviceStatus::SetThreadName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        };
    local:
        *;
 };