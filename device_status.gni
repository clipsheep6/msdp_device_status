# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

declare_args() {
  device_status_intention_framework = true
  device_status_rust_enabled = false
  device_status_interaction_coordination = false
  device_status_drag_enable_monitor = true
  device_status_drag_enable_interceptor = false
  device_status_drag_enable_animation = false
  device_status_performance_check = true
  device_status_sensor_enable = true
  device_status_memmgr_enable = false
  if (defined(global_parts_info)) {
    if (!defined(global_parts_info.sensors_sensor)) {
      device_status_sensor_enable = false
    }
    if (defined(global_parts_info.resourceschedule_memmgr_override)) {
      device_status_memmgr_enable = true
    }
  }
}

ability_runtime_path = "//foundation/ability/ability_runtime"
ability_runtime_kits_path = "${ability_runtime_path}/frameworks/kits"
device_status_part_name = "device_status"
device_status_subsystem_name = "msdp"
device_status_root_path = "//base/msdp/device_status"
device_status_interfaces_path = "${device_status_root_path}/interfaces"
device_status_libs_path = "${device_status_root_path}/libs"
device_status_frameworks_path = "${device_status_root_path}/frameworks"
device_status_intention_path = "${device_status_root_path}/intention"
device_status_service_path = "${device_status_root_path}/services"
device_status_utils_path = "${device_status_root_path}/utils/common"
device_status_fuzz_output_path = "${device_status_part_name}/device_status"
intention_root_path = "//base/msdp/device_status/intention"
file_dfs_service_path = "//foundation/filemanagement/dfs_service"

device_status_default_defines = []

if (device_status_intention_framework) {
  device_status_default_defines += [ "OHOS_BUILD_ENABLE_INTENTION_FRAMEWORK" ]
}

if (device_status_rust_enabled) {
  device_status_default_defines += [ "OHOS_BUILD_ENABLE_RUST_IMPL" ]
}

if (device_status_interaction_coordination) {
  device_status_default_defines += [ "OHOS_BUILD_ENABLE_COORDINATION" ]
}

if (device_status_performance_check) {
  device_status_default_defines += [ "ENABLE_PERFORMANCE_CHECK" ]
}

if (device_status_drag_enable_monitor) {
  device_status_default_defines += [ "OHOS_DRAG_ENABLE_MONITOR" ]
}

if (device_status_drag_enable_interceptor) {
  device_status_default_defines += [ "OHOS_DRAG_ENABLE_INTERCEPTOR" ]
}

if (device_status_drag_enable_animation) {
  device_status_default_defines += [ "OHOS_DRAG_ENABLE_ANIMATION" ]
}


229:virtual void OnStopCooperate(const std::string &remoteNetworkId) {}

2503 /**
 * @tc.name: inputDevcieMgr_test056
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test055, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto [sender, receiver] = Channel<CooperateEvent>::OpenChannel();
    g_context->AttachSender(sender);
    g_context->inputDevMgr_.Enable(sender);
    bool switchStatus = false;
    DSoftbusSessionOpened notice = {
            .networkId = LOCAL_NETWORKID,
            .normal = switchStatus,
    };
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.OnSoftbusSessionOpened(notice));
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.OnSoftbusSessionClosed(notice));
}

/**
 * @tc.name: inputDevcieMgr_test057
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test056, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    DSoftbusSyncInputDevice dSoftbusSyncInputDevice {};
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.OnRemoteInputDevice(dSoftbusSyncInputDevice));
    DSoftbusHotPlugEvent dSoftbusHotPlugEvent {};
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.OnRemoteHotPlug(dSoftbusHotPlugEvent));
}

/**
 * @tc.name: inputDevcieMgr_test058
 * @tc.desc: Test cooperate plugin HandleRemoteHotPlug
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test057, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    DSoftbusHotPlugEvent notice1 = {
            .networkId = LOCAL_NETWORKID,
            .type = InputHotplugType::PLUG,
            .device = std::make_shared<Device>(VREMOTE_NETWORKID),
    };
    DSoftbusHotPlugEvent notice2 = {
            .networkId = LOCAL_NETWORKID,
            .type = InputHotplugType::UNPLUG,
            .device = std::make_shared<Device>(VREMOTE_NETWORKID),
    };
    g_context->inputDevMgr_.AddVirtualInputDevice(notice1.networkId, 987654321);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.HandleRemoteHotPlug(notice2));
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.HandleRemoteHotPlug(notice1));
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.HandleRemoteHotPlug(notice2));
}

/**
 * @tc.name: inputDevcieMgr_test059
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test058, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.NotifyInputDeviceToRemote(REMOTE_NETWORKID));
    std::shared_ptr<IDevice> g_device = std::make_shared<Device>(VREMOTE_NETWORKID);
    g_context->inputDevMgr_.AddRemoteInputDevice(LOCAL_NETWORKID, g_device);
    g_context->inputDevMgr_.AddRemoteInputDevice(LOCAL_NETWORKID, g_device);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.RemoveRemoteInputDevice(LOCAL_NETWORKID, g_device));
    g_context->inputDevMgr_.AddRemoteInputDevice(LOCAL_NETWORKID, g_device);
    g_context->inputDevMgr_.RemoveAllRemoteInputDevice(REMOTE_NETWORKID);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.RemoveAllRemoteInputDevice(LOCAL_NETWORKID));
    g_context->inputDevMgr_.DumpRemoteInputDevice(LOCAL_NETWORKID);
    g_context->inputDevMgr_.AddRemoteInputDevice(LOCAL_NETWORKID, g_device);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.DumpRemoteInputDevice(LOCAL_NETWORKID));
    NetPacket packet(MessageId::DSOFTBUS_INPUT_DEV_SYNC);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.SerializeDevice(g_device, packet));
    g_device = nullptr;
}

/**
 * @tc.name: inputDevcieMgr_test060
 * @tc.desc: Test cooperate plugin HandleRemoteHotPlug
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test059, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    std::shared_ptr<IDevice> g_device = std::make_shared<Device>(VREMOTE_NETWORKID);
    NetPacket pkt1(MessageId::INVALID);
    int32_t ret = g_context->dsoftbus_.DeserializeDevice(g_device, pkt1);
    EXPECT_EQ(ret, RET_ERR);
    NetPacket pkt2(MessageId::DSOFTBUS_INPUT_DEV_SYNC);
    ret = g_context->dsoftbus_.DeserializeDevice(g_device, pkt2);
    EXPECT_EQ(ret, RET_ERR);
    NetPacket pkt3(MessageId::DSOFTBUS_INPUT_DEV_HOT_PLUG);
    ret = g_context->dsoftbus_.DeserializeDevice(g_device, pkt3);
    EXPECT_EQ(ret, RET_ERR);
}

/**
 * @tc.name: inputDevcieMgr_test061
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test060, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    std::shared_ptr<IDevice> g_device = std::make_shared<Device>(VREMOTE_NETWORKID);
    auto inputDev = std::make_shared<MMI::InputDevice>();
    g_device->AddCapability(Device::Capability::DEVICE_CAP_MAX);
    inputDev = g_context->inputDevMgr_.Transform(g_device);
    g_device->AddCapability(Device::Capability::DEVICE_CAP_KEYBOARD);
    inputDev = g_context->inputDevMgr_.Transform(g_device);
    EXPECT_NE(inputDev, nullptr);
    g_device->AddCapability(Device::Capability::DEVICE_CAP_POINTER);
    inputDev = g_context->inputDevMgr_.Transform(g_device);
    EXPECT_NE(inputDev, nullptr);
}

/**
 * @tc.name: inputDevcieMgr_test062
 * @tc.desc: Test cooperate plugin GetRemoteDeviceById
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test061, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    std::shared_ptr<IDevice> g_device = std::make_shared<Device>(VREMOTE_NETWORKID);
    auto ret = g_context->inputDevMgr_.GetRemoteDeviceById(LOCAL_NETWORKID, VREMOTE_NETWORKID);
    EXPECT_EQ(ret, nullptr);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.RemoveVirtualInputDevice(LOCAL_NETWORKID, VREMOTE_NETWORKID));
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.AddRemoteInputDevice(LOCAL_NETWORKID, g_device));
    ret = g_context->inputDevMgr_.GetRemoteDeviceById(LOCAL_NETWORKID, VREMOTE_NETWORKID);
    EXPECT_NE(ret, nullptr);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.AddVirtualInputDevice(LOCAL_NETWORKID, VREMOTE_NETWORKID));
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.RemoveVirtualInputDevice(LOCAL_NETWORKID, VREMOTE_NETWORKID));
}

/**
 * @tc.name: inputDevcieMgr_test063
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test063, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    std::string TEST_DEV_NODE { "/dev/input/TestDeviceNode" };
    env->devMgr_.AddDevice(TEST_DEV_NODE);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.NotifyInputDeviceToRemote(REMOTE_NETWORKID));
}

/**
 * @tc.name: inputDevcieMgr_test064
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test064, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    DeviceStatus::InputHotplugEvent inputHotplugEvent;
    inputHotplugEvent.isKeyboard = true;
    inputHotplugEvent.deviceId = 1;
    inputHotplugEvent.type = InputHotplugType::UNPLUG;
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.BroadcastHotPlugToRemote(inputHotplugEvent));
}

/**
 * @tc.name: inputDevcieMgr_test065
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, inputDevcieMgr_test065, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    DeviceStatus::InputHotplugEvent inputHotplugEvent;
    inputHotplugEvent.isKeyboard = true;
    inputHotplugEvent.deviceId = 1;
    inputHotplugEvent.type = InputHotplugType::PLUG;
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.BroadcastHotPlugToRemote(inputHotplugEvent));
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnStart in the RelayConfirmation class
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent062, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent startEvent(
        CooperateEventType::START,
        StartCooperateEvent{
        .errCode = std::make_shared<std::promise<int32_t>>(),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnStart(cooperateContext, startEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnSwitchChanged interface
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent063, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DDM_BOARD_OFFLINE,
        DDMBoardOfflineEvent {
            .networkId = REMOTE_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    relay->OnSwitchChanged(cooperateContext, event);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    relay->OnSwitchChanged(cooperateContext, event);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: stateMachine_test065
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test065, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    g_context->inputDevMgr_.enable_ = true;
    auto [sender, receiver] = Channel<CooperateEvent>::OpenChannel();
    g_context->AttachSender(sender);
    ASSERT_NO_FATAL_FAILURE(g_context->inputDevMgr_.Enable(sender));
}

/**
 * @tc.name: stateMachine_test067
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test067, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_START_COOPERATE,
        DSoftbusStartCooperate {
            .networkId = LOCAL_NETWORKID
    });
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnRemoteStart(cooperateContext, startEvent));
}

/**
 * @tc.name: stateMachine_test068
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test068, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_START_COOPERATE,
        DSoftbusStartCooperate {
            .networkId = LOCAL_NETWORKID
    });
    g_stateMachine->isCooperateEnable_ = true;
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnRemoteStart(cooperateContext, startEvent));
}

/**
 * @tc.name: stateMachine_test069
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test069, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    int32_t pid = IPCSkeleton::GetCallingPid();
    Channel<CooperateEvent>::Sender sender;
    auto appStateObserver_ = sptr<StateMachine::AppStateObserver>::MakeSptr(sender, pid);
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->UnregisterApplicationStateObserver());
}

/**
 * @tc.name: stateMachine_test070
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test070, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    std::string commonEvent = EventFwk::CommonEventSupport::COMMON_EVENT_SCREEN_OFF;
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnCommonEvent(cooperateContext, commonEvent));
}

/**
 * @tc.name: stateMachine_test071
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test071, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    std::string commonEvent = "-1";
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnCommonEvent(cooperateContext, commonEvent));
}

/**
 * @tc.name: stateMachine_test072
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent072, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent closeEvent(
        CooperateEventType::DSOFTBUS_INPUT_DEV_SYNC,
        DSoftbusSyncInputDevice {
            .networkId = LOCAL_NETWORKID,
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnRemoteInputDevice(cooperateContext, closeEvent);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent073, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DSOFTBUS_INPUT_DEV_SYNC,
        UpdateCooperateFlagEvent {
            .mask = 10,
            .flag = 1,
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnUpdateCooperateFlag(cooperateContext, event);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnSwitchChanged interface
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent074, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DDM_BOARD_OFFLINE,
        DDMBoardOfflineEvent {
            .networkId = REMOTE_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnSwitchChanged(cooperateContext, event);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    relay->OnSwitchChanged(cooperateContext, event);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: stateMachine_test075
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent075, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent closeEvent(
        CooperateEventType::DSOFTBUS_INPUT_DEV_HOT_PLUG,
        DSoftbusHotPlugEvent {
            .networkId = LOCAL_NETWORKID,
            .type = InputHotplugType::PLUG,
            .device = std::make_shared<Device>(VREMOTE_NETWORKID),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnRemoteHotPlug(cooperateContext, closeEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: stateMachine_test076
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent076, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent startEvent(
        CooperateEventType::DSOFTBUS_START_COOPERATE,
        DSoftbusStartCooperate {
            .networkId = LOCAL_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    stateIn.initial_->OnRemoteStart(cooperateContext, startEvent);
    relay->OnRemoteStart(cooperateContext, startEvent);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    stateOut.initial_->OnRemoteStart(cooperateContext, startEvent);

    cooperateContext.remoteNetworkId_ = LOCAL_NETWORKID;
    stateIn.initial_->OnRemoteStart(cooperateContext, startEvent);
    relay->OnRemoteStart(cooperateContext, startEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnStart in the RelayConfirmation class
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent077, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent startEvent(
        CooperateEventType::START,
        StartCooperateEvent{
        .errCode = std::make_shared<std::promise<int32_t>>(),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnStart(cooperateContext, startEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnSwitchChanged interface
 * @tc.type: FUNC
 * @tc.require:
 */

HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent078, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DDM_BOARD_OFFLINE,
        DDMBoardOfflineEvent {
            .networkId = REMOTE_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    relay->OnSwitchChanged(cooperateContext, event);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    relay->OnSwitchChanged(cooperateContext, event);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: dsoftbusHandler_test073
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, dsoftbusHandler_test073, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    std::string localNetworkId = g_context->dsoftbus_.GetLocalNetworkId();
    ASSERT_NO_FATAL_FAILURE(g_context->dsoftbus_.OnConnected(localNetworkId));
}

/**
 * @tc.name: dsoftbusHandler_test074
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, dsoftbusHandler_test074, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    NetPacket pkt(MessageId::DSOFTBUS_START_COOPERATE);
    std::string localNetworkId = g_context->dsoftbus_.GetLocalNetworkId();
    ASSERT_NO_FATAL_FAILURE(g_context->dsoftbus_.OnRemoteInputDevice(localNetworkId, pkt));
}

/**
 * @tc.name: dsoftbusHandler_test075
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, dsoftbusHandler_test075, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    NetPacket pkt(MessageId::DSOFTBUS_START_COOPERATE);
    int32_t testData = 10;
    pkt << testData;
    std::string localNetworkId = g_context->dsoftbus_.GetLocalNetworkId();
    ASSERT_NO_FATAL_FAILURE(g_context->dsoftbus_.OnRemoteInputDevice(localNetworkId, pkt));
}

/**
 * @tc.name: dsoftbusHandler_test076
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, dsoftbusHandler_test076, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    NetPacket pkt(MessageId::DSOFTBUS_START_COOPERATE);
    std::string localNetworkId = g_context->dsoftbus_.GetLocalNetworkId();
    ASSERT_NO_FATAL_FAILURE(g_context->dsoftbus_.OnRemoteHotPlug(localNetworkId, pkt));
}

/**
 * @tc.name: dsoftbusHandler_test077
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, dsoftbusHandler_test077, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    NetPacket pkt(MessageId::DSOFTBUS_START_COOPERATE);
    std::string localNetworkId = g_context->dsoftbus_.GetLocalNetworkId();
    ASSERT_NO_FATAL_FAILURE(g_context->dsoftbus_.OnRemoteHotPlug(localNetworkId, pkt));
}

/**
 * @tc.name: stateMachine_test078
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test078, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    int32_t testErrCode = 0;
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_SESSION_OPENED,
        DDMBoardOnlineEvent {
            .networkId = LOCAL_NETWORKID,
            .normal = true,
            .errCode = testErrCode,
    });
    g_stateMachine->isCooperateEnable_ = true;
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_IN;
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnSoftbusSessionOpened(cooperateContext, startEvent));
}

/**
 * @tc.name: stateMachine_test079
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test079, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_INPUT_DEV_SYNC,
        DSoftbusSyncInputDevice {
            .networkId = LOCAL_NETWORKID,
    });
    g_stateMachine->isCooperateEnable_ = true;
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_IN;
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnRemoteInputDevice(cooperateContext, startEvent));
}

/**
 * @tc.name: stateMachine_test080
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, stateMachine_test080, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_INPUT_DEV_HOT_PLUG,
        DSoftbusHotPlugEvent {
            .networkId = LOCAL_NETWORKID,
            .type = InputHotplugType::UNPLUG,
    });
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_IN;
    g_stateMachine->isCooperateEnable_ = true;
    ASSERT_NO_FATAL_FAILURE(g_stateMachine->OnRemoteHotPlug(cooperateContext, startEvent));
}

/**
 * @tc.name: cooperateIn_test081
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, cooperateIn_test081, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    CooperateEvent startEvent (
        CooperateEventType::DSOFTBUS_INPUT_DEV_HOT_PLUG,
        DSoftbusStartCooperate {
            .networkId = LOCAL_NETWORKID
    });
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_IN;
    g_stateMachine->isCooperateEnable_ = true;
    ASSERT_NO_FATAL_FAILURE(relay->OnAppClosed(cooperateContext, startEvent));
}

/**
 * @tc.name: cooperateIn_test082
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, cooperateIn_test082, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    auto pointerEvent = MMI::PointerEvent::Create();
    ASSERT_NE(pointerEvent, nullptr);
    pointerEvent->SetPointerAction(MMI::PointerEvent::POINTER_ACTION_UP);
    pointerEvent->SetSourceType(MMI::PointerEvent::SOURCE_TYPE_MOUSE);
    MMI::PointerEvent::PointerItem pointerItem;
    pointerEvent->GetPointerItem(pointerEvent->GetPointerId(), pointerItem);
    CooperateEvent event(
        CooperateEventType::INPUT_POINTER_EVENT,
        InputPointerEvent {
            .deviceId = pointerEvent->GetDeviceId(),
            .pointerAction = pointerEvent->GetPointerAction(),
            .sourceType = pointerEvent->GetSourceType(),
            .position = Coordinate {
                .x = pointerItem.GetDisplayX(),
                .y = pointerItem.GetDisplayY(),
            }
        });
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_IN;
    g_stateMachine->isCooperateEnable_ = true;
    ASSERT_NO_FATAL_FAILURE(relay->OnPointerEvent(cooperateContext, event));
}

/**
 * @tc.name: cooperateIn_test085
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent085, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DSOFTBUS_INPUT_DEV_SYNC,
        UpdateCooperateFlagEvent {
            .mask = 10,
            .flag = 1,
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnUpdateCooperateFlag(cooperateContext, event);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: cooperateIn_test086
 * @tc.desc: Test OnSwitchChanged interface
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent086, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DDM_BOARD_OFFLINE,
        DDMBoardOfflineEvent {
            .networkId = REMOTE_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnSwitchChanged(cooperateContext, event);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    relay->OnSwitchChanged(cooperateContext, event);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: cooperateOut_test088
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, cooperateOut_test088, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateOut::Initial>(stateOut);
    ASSERT_NE(relay, nullptr);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    int32_t testErrCode = 0;
    CooperateEvent event (
        CooperateEventType::DSOFTBUS_SESSION_OPENED,
        DDMBoardOnlineEvent {
            .networkId = REMOTE_NETWORKID,
            .normal = true,
            .errCode = testErrCode,
    });
    g_stateMachine->isCooperateEnable_ = true;
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_OUT;
    ASSERT_NO_FATAL_FAILURE(relay->OnBoardOffline(cooperateContext, event));
}

/**
 * @tc.name: cooperateOut_test089
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, cooperateOut_test089, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateOut::Initial>(stateOut);
    ASSERT_NE(relay, nullptr);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    int32_t testErrCode = 0;
    CooperateEvent event (
        CooperateEventType::DSOFTBUS_SESSION_OPENED,
        DDMBoardOnlineEvent {
            .networkId = REMOTE_NETWORKID,
            .normal = false,
            .errCode = testErrCode,
    });
    g_stateMachine->isCooperateEnable_ = true;
    g_stateMachine->current_ = CooperateState::COOPERATE_STATE_OUT;
    ASSERT_NO_FATAL_FAILURE(relay->OnSwitchChanged(cooperateContext, event));
}

/**
 * @tc.name: cooperateOut_test090
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, cooperateOut_test090, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    StopCooperateEvent stopEvent {
        .pid = IPCSkeleton::GetCallingPid(),
        .userData = 1,
        .isUnchained = false,
    };
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateOut cooperateOut(*g_stateMachine, env);
    ASSERT_NO_FATAL_FAILURE(cooperateOut.UnchainConnections(cooperateContext, stopEvent));
}

/**
 * @tc.name: stateMachine_test091
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent091, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent closeEvent(
        CooperateEventType::DSOFTBUS_INPUT_DEV_HOT_PLUG,
        DSoftbusHotPlugEvent {
            .networkId = LOCAL_NETWORKID,
            .type = InputHotplugType::PLUG,
            .device = std::make_shared<Device>(VREMOTE_NETWORKID),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = LOCAL_NETWORKID;
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnRemoteHotPlug(cooperateContext, closeEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: stateMachine_test092
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent092, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent startEvent(
        CooperateEventType::DSOFTBUS_START_COOPERATE,
        DSoftbusStartCooperate {
            .networkId = LOCAL_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    stateIn.initial_->OnRemoteStart(cooperateContext, startEvent);
    relay->OnRemoteStart(cooperateContext, startEvent);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    stateOut.initial_->OnRemoteStart(cooperateContext, startEvent);

    cooperateContext.remoteNetworkId_ = LOCAL_NETWORKID;
    stateIn.initial_->OnRemoteStart(cooperateContext, startEvent);
    relay->OnRemoteStart(cooperateContext, startEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnStart in the RelayConfirmation class
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent093, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent startEvent(
        CooperateEventType::START,
        StartCooperateEvent{
        .errCode = std::make_shared<std::promise<int32_t>>(),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnStart(cooperateContext, startEvent);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: StateMachineTest_OnEvent
 * @tc.desc: Test OnSwitchChanged interface
 * @tc.type: FUNC
 * @tc.require:
 */

HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent094, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DDM_BOARD_OFFLINE,
        DDMBoardOfflineEvent {
            .networkId = REMOTE_NETWORKID
        });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    g_stateMachine = std::make_shared<Cooperate::StateMachine>(env);
    Cooperate::CooperateIn stateIn(*g_stateMachine, env);
    auto relay = std::make_shared<Cooperate::CooperateIn::RelayConfirmation>(stateIn, stateIn.initial_);
    ASSERT_NE(relay, nullptr);
    relay->OnSwitchChanged(cooperateContext, event);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    relay->OnSwitchChanged(cooperateContext, event);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}

/**
 * @tc.name: cooperateFree_test095
 * @tc.desc: Test cooperate plugin
 * @tc.type: FUNC
 * @tc.require:
 */
HWTEST_F(CooperatePluginTest, StateMachineTest_OnEvent95, TestSize.Level0)
{
    CALL_TEST_DEBUG;
    CooperateEvent event(
        CooperateEventType::DSOFTBUS_INPUT_DEV_SYNC,
        StartCooperateEvent {
        .pid = IPCSkeleton::GetCallingPid(),
        .userData = 1,
        .remoteNetworkId = "test",
        .startDeviceId = 1,
        .errCode = std::make_shared<std::promise<int32_t>>(),
    });
    auto env = ContextService::GetInstance();
    ASSERT_NE(env, nullptr);
    Context cooperateContext(env);
    cooperateContext.remoteNetworkId_ = REMOTE_NETWORKID;
    Cooperate::CooperateFree stateIn(*g_stateMachine, env);
    ASSERT_NE(stateIn.initial_, nullptr);
    auto relay = std::make_shared<Cooperate::CooperateFree::Initial>(stateIn);
    ASSERT_NE(relay, nullptr);
    relay->OnStart(cooperateContext, event);
    Cooperate::CooperateOut stateOut(*g_stateMachine, env);
    ASSERT_NE(stateOut.initial_, nullptr);
    bool ret = g_context->mouseLocation_.HasLocalListener();
    EXPECT_FALSE(ret);
}
} // namespace DeviceStatus
} // namespace Msdp
} // namespace OHOS
