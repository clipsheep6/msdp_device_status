# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("../../../device_status.gni")

###############################hydra_fuzz#################################
import("//build/config/features.gni")
import("//build/test.gni")
module_output_path = "${device_status_fuzz_output_path}"
deps_ex = [
  "ability_runtime:app_manager",
  "cJSON:cjson",
  "c_utils:utils",
  "graphic_2d:librender_service_client",
  "hisysevent:libhisysevent",
  "hitrace:hitrace_meter",
  "hilog:libhilog",
  "input:libmmi-client",
  "window_manager:libdm",
]

###############################fuzztest#################################
ohos_fuzztest("SpecialInputDeviceFuzzTest") {
  module_out_path = module_output_path
  fuzz_config_file =
      "${device_status_root_path}/test/fuzztest/ddmadapter_fuzzer"
  include_dirs = [
    "${device_status_root_path}/libs/interface",
    "${device_status_root_path}/utils/custom_config/include",
    "${device_status_utils_path}/include",
  ]

  cflags = [
    "-g",
    "-O0",
    "-fno-omit-frame-pointer",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "specialinputdevice_fuzzer.cpp" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_root_path}/utils/custom_config:custom_config_parser",
    "${device_status_root_path}/utils/json_parser:json_parser",
    "${device_status_utils_path}:devicestatus_util",
  ]
  external_deps = deps_ex
}

group("fuzztest") {
  testonly = true
  deps = []
  deps += [ ":SpecialInputDeviceFuzzTest" ]
}
