# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../device_status.gni")
if (fusion_interaction_coordination) {
  import("//base/msdp/motion/motion.gni")
}

if (defined(fusion_interaction_motion_drag) && fusion_interaction_motion_drag) {
  device_status_default_defines += [ "OHOS_BUILD_ENABLE_MOTION_DRAG" ]
}

config("devicestatus_services_private_config") {
  include_dirs = [
    "context/include",
    "delegate_task/include",
    "native/include",
    "timer_manager/include",
    "device_manager/include",
    "${device_status_utils_path}/include",
    "${device_status_interfaces_path}/innerkits/include",
    "${device_status_interfaces_path}/innerkits/interaction/include",
    "../utils/common/include",
    "../libs/interface",
    "interaction/drag/include",
    "communication/base",
    "communication/service/include",
  ]

  if (defined(fusion_interaction_motion_drag) &&
      fusion_interaction_motion_drag) {
    include_dirs += [ "${motion_service_path}/native/include" ]
  }

  defines = device_status_default_defines
}

config("devicestatus_services_public_config") {
  include_dirs = [
    "context/include",
    "delegate_task/include",
    "native/include",
    "timer_manager/include",
    "device_manager/include",
    "interaction/drag/include",
  ]
}

sources_set = [
  "communication/service/src/devicestatus_srv_stub.cpp",
  "delegate_task/src/delegate_tasks.cpp",
  "device_manager/src/device.cpp",
  "device_manager/src/device_manager.cpp",
  "device_manager/src/enumerator.cpp",
  "device_manager/src/monitor.cpp",
  "native/src/devicestatus_dumper.cpp",
  "native/src/devicestatus_hisysevent.cpp",
  "native/src/devicestatus_manager.cpp",
  "native/src/devicestatus_msdp_client_impl.cpp",
  "native/src/devicestatus_service.cpp",
  "native/src/stream_server.cpp",
  "timer_manager/src/timer_manager.cpp",
]

external_deps_set = [
  "access_token:libaccesstoken_sdk",
  "c_utils:utils",
  "graphic_standard:libcomposer",
  "graphic_standard:window_animation",
  "hilog:libhilog",
  "hisysevent:libhisysevent",
  "hitrace:hitrace_meter",
  "input:libmmi-client",
  "ipc:ipc_single",
  "multimedia_image_framework:image_native",
  "safwk:system_ability_fwk",
  "window_manager:libwm",
]

ohos_shared_library("devicestatus_service") {
  shlib_type = "sa"
  include_dirs = [ "//third_party/cJSON" ]

  sources = sources_set

  configs = [ ":devicestatus_services_private_config" ]

  public_configs = [ ":devicestatus_services_public_config" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
    "interaction/drag:interaction_drag",
    "//third_party/openssl:libcrypto_shared",
  ]

  if (fusion_interaction_coordination) {
    deps += [ "interaction/coordination:coordination" ]
  }

  if (defined(fusion_interaction_motion_drag) &&
      fusion_interaction_motion_drag) {
    deps += [ "${motion_service_path}:motion_drag" ]
  }

  external_deps = external_deps_set
  if (fusion_interaction_coordination) {
    external_deps += [
      "device_manager:devicemanagersdk",
      "distributed_input:libdinput_sdk",
    ]
  }

  subsystem_name = "${device_status_subsystem_name}"
  part_name = "${device_status_part_name}"
}

ohos_static_library("devicestatus_static_service") {
  include_dirs = [ "//third_party/cJSON" ]

  sources = sources_set

  configs = [ ":devicestatus_services_private_config" ]

  public_configs = [ ":devicestatus_services_public_config" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
    "interaction/drag:interaction_drag",
    "//third_party/openssl:libcrypto_shared",
  ]

  if (fusion_interaction_coordination) {
    deps += [ "interaction/coordination:coordination" ]
  }

  if (defined(fusion_interaction_motion_drag) &&
      fusion_interaction_motion_drag) {
    deps += [ "${motion_service_path}:motion_drag" ]
  }

  external_deps = external_deps_set
  if (fusion_interaction_coordination) {
    external_deps += [
      "device_manager:devicemanagersdk",
      "distributed_input:libdinput_sdk",
    ]
  }

  subsystem_name = "${device_status_subsystem_name}"
  part_name = "${device_status_part_name}"
}
