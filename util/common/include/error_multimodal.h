/*
 * Copyright (c) 2021-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef ERROR_MULTIMODAL_H
#define ERROR_MULTIMODAL_H

#include <errors.h>

namespace OHOS {
namespace MMI {
namespace {
constexpr int32_t ERROR_UNSUPPORT = -2;
constexpr int32_t ARGV_VALID = 2;
}

enum MmiModuleType {
    MODULE_CLIENT = 0x00,
    MODULE_EVENT_SIMULATE = 0x01,
    MODULE_SERVER = 0x02,
    MODULE_UTIL = 0x03,
    MODULE_VIRTUAL_DEVICE = 0x04,
    MODULE_NAPI = 0x05
};

constexpr ErrCode CLIENT_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_CLIENT);

enum {
    MSG_HANDLER_INIT_FAIL = CLIENT_ERR_OFFSET,
    START_CLI_FAIL,
    EVENT_CONSUM_FAIL,
    UNKNOW_TOUCH_TYPE,
    STRCPY_S_CALLBACK_FAIL,
    CHECK_PERMISSION_FAIL,
};

constexpr ErrCode EVENT_SIMULATE_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_EVENT_SIMULATE);

enum {
    FILE_OPEN_FAIL = EVENT_SIMULATE_ERR_OFFSET,
    STREAM_BUF_READ_FAIL,
    EVENT_REG_FAIL,
    PARAM_INPUT_FAIL,
    EVENT_DATA_LEN_INPUT_FAIL,
    TOUCH_CMD_INPUT_FAIL,
    STRSET_SEC_FUN_FAIL,
    DRIVE_PATH_INVALID,
    CMD_PATH_INVALID,
    CMD_STR_INVALID,
};

constexpr ErrCode SERVER_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_SERVER);

enum {
    MSG_SEND_FAIL = SERVER_ERR_OFFSET,
    UNKNOWN_EVENT,
    ERROR_NULL_POINTER,
    WINDOWS_MSG_INIT_FAIL,
    SVR_MSG_HANDLER_INIT_FAIL,
    INPUT_EVENT_HANDLER_INIT_FAIL,
    LIBINPUT_INIT_FAIL,
    LIBINPUT_START_FAIL,
    LIBMMI_SVR_START_FAIL,
    LOG_CONFIG_FAIL,
    LOG_START_FAIL,
    PARAM_INPUT_INVALID,
    INVALID_PARAM,
    SENIOR_INPUT_DEV_INIT_FAIL,
    LIBINPUT_DEV_EMPTY,
    REG_EVENT_DISP_FAIL,
    KEY_EVENT_DISP_FAIL,
    INVAILD_COORDINATE,
    ILLEGAL_DEV_ID,
    DEV_REG_FAIL,
    FD_FIND_FAIL,
    CONN_BREAK,
    SOCKET_BUF_FULL,
    WAITING_QUEUE_FULL,
    APP_NOT_RESP,
    MEMCPY_SEC_FUN_FAIL,
    LIBINPUT_DEV_NULLPTR,
    TOUCH_ID_NO_FIND,
    JOYSTICK_EVENT_DISP_FAIL,
    TOUCH_EVENT_DISP_FAIL,
    POINT_REG_EVENT_DISP_FAIL,
    POINT_EVENT_DISP_FAIL,
    KEY_EVENT_PKG_FAIL,
    POINT_EVENT_PKG_FAIL,
    JOYSTICK_AXIS_EVENT_PKG_FAIL,
    JOYSTICK_KEY_EVENT_PKG_FAIL,
    SPRINTF_S_SEC_FUN_FAIL,
    SPCL_REG_EVENT_DISP_FAIL,
    TABLETPAD_KEY_EVENT_PKG_FAIL,
    TABLETPAD_KEY_EVENT_DISP_FAIL,
    TABLETPAD_EVENT_PKG_FAIL,
    TABLETPAD_EVENT_DISP_FAIL,
    TABLETTOOL_EVENT_PKG_FAIL,
    TABLETTOOL_EVENT_DISP_FAIL,
    MULTIDEVICE_SAME_EVENT_MARK,
    GESTURE_EVENT_PKG_FAIL,
    STAT_CALL_FAIL,
    REG_EVENT_PKG_FAIL,
    GESTURE_EVENT_DISP_FAIL,
    DEV_PARAM_PKG_FAIL,
    DEV_ADD_EVENT_PKG_FAIL,
    DEV_REMOVE_EVENT_PKG_FAIL,
    ADD_DEVICE_INFO_CALL_FAIL,
    TOUCH_EVENT_PKG_FAIL,
    UNKNOWN_EVENT_PKG_FAIL,
    MEMSET_SEC_FUN_FAIL,
    DEVICEID_PARAM_PKG_FAIL,
    MALLOC_FAIL,
    SEC_STRCPY_FAIL,
    SASERVICE_INIT_FAIL,
    SASERVICE_START_FAIL,
    SASERVICE_STOP_FAIL,
    INVALID_RETURN_VALUE,
    EPOLL_CTL_FAIL,
    EXP_SO_LIBY_INIT_FAIL,
    SASERVICE_PERMISSION_FAIL,
    SASERVICE_IPC_CALL_FAIL,
    STREAMBUFF_OVER_FLOW,
    ADD_SESSION_FAIL,
    MAKE_SHARED_FAIL,
    CLEAR_DEAD_SESSION_FAIL,
    INIT_SIGNAL_HANDLER_FAIL,
    FCNTL_FAIL,
    PACKET_WRITE_FAIL,
    PACKET_READ_FAIL,
    POINTER_DRAW_INIT_FAIL,
};

constexpr ErrCode UTIL_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_UTIL);

enum {
    NON_STD_EVENT = UTIL_ERR_OFFSET,
    UNPROC_MSG,
    UNKNOWN_MSG_ID,
    UNKNOWN_DEV,
    FILE_READ_FAIL,
    FILE_WRITE_FAIL,
    API_PARAM_TYPE_FAIL,
    API_OUT_OF_RANGE,
    FOCUS_ID_OBTAIN_FAIL,
    SOCKET_PATH_INVALID,
    SOCKET_CREATE_FAIL,
    SOCKET_BIND_FAIL,
    SOCKET_LISTEN_FAIL,
    EPOLL_CREATE_FAIL,
    EPOLL_MODIFY_FAIL,
    STREAM_BUF_WRITE_FAIL,
    SESSION_ADD_FAIL,
    VAL_NOT_EXP,
    MEM_NOT_ENOUGH,
    MEM_OUT_OF_BOUNDS,
    CONN_FAIL,
    SESSION_NOT_FOUND,
    FD_ACCEPT_FAIL,
    PID_OBTAIN_FAIL,
    FD_OBTAIN_FAIL,
    INVALID_MONITOR_MON
};

constexpr ErrCode VIRTUAL_DEVICE_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_VIRTUAL_DEVICE);

constexpr ErrCode NAPI_ERR_OFFSET = ErrCodeOffset(SUBSYS_MULTIMODAINPUT, MODULE_NAPI);

enum {
    CALL_NAPI_API_ERR = NAPI_ERR_OFFSET
};

enum REGISTER {
    MMI_STANDARD_EVENT_SUCCESS = 1,
    MMI_STANDARD_EVENT_EXIST = 2,
    MMI_STANDARD_EVENT_INVALID_PARAM = -1,
    MMI_STANDARD_EVENT_NOT_EXIST = 3,
};
enum EXCEPTIONTEST {
    SERVICESELFCHECK = 1001,
    MULTIMODALINPUT_EXCEPTION_INJECTION = 1002,
};

enum MMI_SERVICE_STATUS {
    MMI_SERVICE_INVALID = -1,
    MMI_SERVICE_RUNNING,
};
} // namespace MMI
} // namespace OHOS
#endif // ERROR_MULTIMODAL_H